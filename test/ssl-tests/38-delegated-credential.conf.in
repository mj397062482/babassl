package ssltests;

our @tests = (
    {
        name => "test client can verify server by delegated credential",
        server => {
            "MinProtocol" => "TLSv1.3",
            "MaxProtocol" => "TLSv1.3",
            "Enable_sign_by_dc" => "on",
            "Certificate" => test_run("dc", "dc-ecc-leaf.crt"),
            "PrivateKey" => test_run("dc", "dc-ecc-leaf.key"),
            "DC" => test_run("dc", "dc-ecc-server.dc"),
            "DCKey" => test_run("dc", "dc-ecc-server.key"),
        },
        client => {
            "MinProtocol" => "TLSv1.3",
            "MaxProtocol" => "TLSv1.3",
            "VerifyCAFile" => test_run("dc", "dc-ecc-chain-ca.crt"),
            "Enable_verify_peer_by_dc" => "on",
        },
        test => {
            "ExpectedResult" => "Success",
            "ExpextClientDCusage" => "VerifyPeerByDCOnly",
            "ExpextServerDCusage" => "SignByDCOnly",
        },
    },
    {
        name => "test client/server can do mtls by delegated credential",
        server => {
            "MinProtocol" => "TLSv1.3",
            "MaxProtocol" => "TLSv1.3",
            "Enable_sign_by_dc" => "on",
            "Enable_verify_peer_by_dc" => "on",
            "Certificate" => test_run("dc", "dc-ecc-leaf.crt"),
            "PrivateKey" => test_run("dc", "dc-ecc-leaf.key"),
            "DC" => test_run("dc", "dc-ecc-server.dc"),
            "DCKey" => test_run("dc", "dc-ecc-server.key"),
            "VerifyCAFile" => test_run("dc", "dc-ecc-chain-ca.crt"),
            "VerifyMode" => "Request",
        },
        client => {
            "MinProtocol" => "TLSv1.3",
            "MaxProtocol" => "TLSv1.3",
            "VerifyCAFile" => test_run("dc", "dc-ecc-chain-ca.crt"),
            "Enable_sign_by_dc" => "on",
            "Enable_verify_peer_by_dc" => "on",
            "Certificate" => test_run("dc", "dc-ecc-leaf-clientUse.crt"),
            "PrivateKey" => test_run("dc", "dc-ecc-leaf-clientUse.key"),
            "DC" => test_run("dc", "dc-ecc-client.dc"),
            "DCKey" => test_run("dc", "dc-ecc-client.key"),
        },
        test => {
            "ExpectedResult" => "Success",
            "ExpextClientDCusage" => "VerifyPeerAndSignByDC",
            "ExpextServerDCusage" => "VerifyPeerAndSignByDC",
        },
    },
    {
        name => "test depoly cert and dc at the same time, but do not open dc ",
        server => {
            "MinProtocol" => "TLSv1.3",
            "MaxProtocol" => "TLSv1.3",
            "Enable_sign_by_dc" => "off",
            "Enable_verify_peer_by_dc" => "off",
            "Certificate" => test_run("dc", "dc-ecc-leaf.crt"),
            "PrivateKey" => test_run("dc", "dc-ecc-leaf.key"),
            "DC" => test_run("dc", "dc-ecc-server.dc"),
            "DCKey" => test_run("dc", "dc-ecc-server.key"),
            "VerifyCAFile" => test_run("dc", "dc-ecc-chain-ca.crt"),
            "VerifyMode" => "Request",
        },
        client => {
            "MinProtocol" => "TLSv1.3",
            "MaxProtocol" => "TLSv1.3",
            "VerifyCAFile" => test_run("dc", "dc-ecc-chain-ca.crt"),
            "Enable_sign_by_dc" => "off",
            "Enable_verify_peer_by_dc" => "off",
            "Certificate" => test_run("dc", "dc-ecc-leaf-clientUse.crt"),
            "PrivateKey" => test_run("dc", "dc-ecc-leaf-clientUse.key"),
            "DC" => test_run("dc", "dc-ecc-client.dc"),
            "DCKey" => test_run("dc", "dc-ecc-client.key"),
        },
        test => {
            "ExpectedResult" => "Success",
            "ExpextClientDCusage" => "NotUseDC",
            "ExpextServerDCusage" => "NotUseDC",
        },
    },
);
