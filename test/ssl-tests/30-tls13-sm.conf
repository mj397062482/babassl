# Generated with generate_ssl_tests.pl

num_tests = 16

test-0 = 0-test ciphersuites TLS_SM4_GCM_SM3
test-1 = 1-test series of ciphersuites includes TLS_SM4_GCM_SM3
test-2 = 2-test ciphersuites TLS_SM4_CCM_SM3
test-3 = 3-test series of ciphersuites includes TLS_SM4_CCM_SM3
test-4 = 4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256
test-5 = 5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384
test-6 = 6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256
test-7 = 7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag
test-8 = 8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag
test-9 = 9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag
test-10 = 10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag
test-11 = 11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag
test-12 = 12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag
test-13 = 13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag
test-14 = 14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag
test-15 = 15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain
# ===========================================================

[0-test ciphersuites TLS_SM4_GCM_SM3]
ssl_conf = 0-test ciphersuites TLS_SM4_GCM_SM3-ssl

[0-test ciphersuites TLS_SM4_GCM_SM3-ssl]
server = 0-test ciphersuites TLS_SM4_GCM_SM3-server
client = 0-test ciphersuites TLS_SM4_GCM_SM3-client

[0-test ciphersuites TLS_SM4_GCM_SM3-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[0-test ciphersuites TLS_SM4_GCM_SM3-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-0]
ExpectedCipher = TLS_SM4_GCM_SM3
ExpectedResult = Success


# ===========================================================

[1-test series of ciphersuites includes TLS_SM4_GCM_SM3]
ssl_conf = 1-test series of ciphersuites includes TLS_SM4_GCM_SM3-ssl

[1-test series of ciphersuites includes TLS_SM4_GCM_SM3-ssl]
server = 1-test series of ciphersuites includes TLS_SM4_GCM_SM3-server
client = 1-test series of ciphersuites includes TLS_SM4_GCM_SM3-client

[1-test series of ciphersuites includes TLS_SM4_GCM_SM3-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[1-test series of ciphersuites includes TLS_SM4_GCM_SM3-client]
CipherString = DEFAULT
Ciphersuites = TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-1]
ExpectedCipher = TLS_SM4_GCM_SM3
ExpectedResult = Success


# ===========================================================

[2-test ciphersuites TLS_SM4_CCM_SM3]
ssl_conf = 2-test ciphersuites TLS_SM4_CCM_SM3-ssl

[2-test ciphersuites TLS_SM4_CCM_SM3-ssl]
server = 2-test ciphersuites TLS_SM4_CCM_SM3-server
client = 2-test ciphersuites TLS_SM4_CCM_SM3-client

[2-test ciphersuites TLS_SM4_CCM_SM3-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[2-test ciphersuites TLS_SM4_CCM_SM3-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-2]
ExpectedCipher = TLS_SM4_CCM_SM3
ExpectedResult = Success


# ===========================================================

[3-test series of ciphersuites includes TLS_SM4_CCM_SM3]
ssl_conf = 3-test series of ciphersuites includes TLS_SM4_CCM_SM3-ssl

[3-test series of ciphersuites includes TLS_SM4_CCM_SM3-ssl]
server = 3-test series of ciphersuites includes TLS_SM4_CCM_SM3-server
client = 3-test series of ciphersuites includes TLS_SM4_CCM_SM3-client

[3-test series of ciphersuites includes TLS_SM4_CCM_SM3-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[3-test series of ciphersuites includes TLS_SM4_CCM_SM3-client]
CipherString = DEFAULT
Ciphersuites = TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-3]
ExpectedCipher = TLS_SM4_CCM_SM3
ExpectedResult = Success


# ===========================================================

[4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256]
ssl_conf = 4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256-ssl

[4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256-ssl]
server = 4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256-server
client = 4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256-client

[4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_AES_128_GCM_SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[4-test sm2-sm3 signature working well in TLS_AES_128_GCM_SHA256-client]
CipherString = DEFAULT
Ciphersuites = TLS_AES_128_GCM_SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-4]
ExpectedCipher = TLS_AES_128_GCM_SHA256
ExpectedResult = Success


# ===========================================================

[5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384]
ssl_conf = 5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384-ssl

[5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384-ssl]
server = 5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384-server
client = 5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384-client

[5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_AES_256_GCM_SHA384
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[5-test sm2-sm3 signature working well in TLS_AES_256_GCM_SHA384-client]
CipherString = DEFAULT
Ciphersuites = TLS_AES_256_GCM_SHA384
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-5]
ExpectedCipher = TLS_AES_256_GCM_SHA384
ExpectedResult = Success


# ===========================================================

[6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256]
ssl_conf = 6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256-ssl

[6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256-ssl]
server = 6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256-server
client = 6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256-client

[6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-first-crt.pem
CipherString = DEFAULT
Ciphersuites = TLS_CHACHA20_POLY1305_SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-first-key.pem

[6-test sm2-sm3 signature working well in TLS_CHACHA20_POLY1305_SHA256-client]
CipherString = DEFAULT
Ciphersuites = TLS_CHACHA20_POLY1305_SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-root-crt.pem
VerifyMode = Peer

[test-6]
ExpectedCipher = TLS_CHACHA20_POLY1305_SHA256
ExpectedResult = Success


# ===========================================================

[7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag]
ssl_conf = 7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-ssl

[7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-ssl]
server = 7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-server
client = 7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-client

[7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
Enable_sm_tls13_strict = on
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem

[7-test server can not accpet TLS_SM4_GCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-7]
ExpectedResult = ServerFail


# ===========================================================

[8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag]
ssl_conf = 8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-ssl

[8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-ssl]
server = 8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-server
client = 8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-client

[8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
Enable_sm_tls13_strict = off
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem

[8-test server accpet TLS_SM4_GCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-8]
ExpectedCipher = TLS_SM4_GCM_SM3
ExpectedResult = Success


# ===========================================================

[9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag]
ssl_conf = 9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag-ssl

[9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag-ssl]
server = 9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag-server
client = 9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag-client

[9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
Enable_sm_tls13_strict = on
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[9-test server can not accpet TLS_SM4_GCM_SM3 with rsa cert when enable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-9]
ExpectedResult = ServerFail


# ===========================================================

[10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag]
ssl_conf = 10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag-ssl

[10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag-ssl]
server = 10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag-server
client = 10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag-client

[10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
Enable_sm_tls13_strict = off
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[10-test server can accpet TLS_SM4_GCM_SM3 with rsa cert when disable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_GCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-10]
ExpectedCipher = TLS_SM4_GCM_SM3
ExpectedResult = Success


# ===========================================================

[11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag]
ssl_conf = 11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-ssl

[11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-ssl]
server = 11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-server
client = 11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-client

[11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
Enable_sm_tls13_strict = on
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem

[11-test server can not accpet TLS_SM4_CCM_SM3 with ecdsa cert when enable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-11]
ExpectedResult = ServerFail


# ===========================================================

[12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag]
ssl_conf = 12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-ssl

[12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-ssl]
server = 12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-server
client = 12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-client

[12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
Enable_sm_tls13_strict = off
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem

[12-test server can accpet TLS_SM4_CCM_SM3 with ecdsa cert when disable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-12]
ExpectedCipher = TLS_SM4_CCM_SM3
ExpectedResult = Success


# ===========================================================

[13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag]
ssl_conf = 13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag-ssl

[13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag-ssl]
server = 13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag-server
client = 13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag-client

[13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
Enable_sm_tls13_strict = on
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[13-test server can not accpet TLS_SM4_CCM_SM3 with rsa cert when enable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-13]
ExpectedResult = ServerFail


# ===========================================================

[14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag]
ssl_conf = 14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag-ssl

[14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag-ssl]
server = 14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag-server
client = 14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag-client

[14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
Enable_sm_tls13_strict = off
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[14-test server can accpet TLS_SM4_CCM_SM3 with rsa cert when disable sm_tls13_strict tag-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-14]
ExpectedCipher = TLS_SM4_CCM_SM3
ExpectedResult = Success


# ===========================================================

[15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain]
ssl_conf = 15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain-ssl

[15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain-ssl]
server = 15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain-server
client = 15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain-client

[15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain-server]
Certificate = ${ENV::TEST_CERTS_DIR}/sm2-leaf.crt
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/sm2-leaf.key

[15-test server can accpet TLS_SM4_CCM_SM3 with long sm2 cert chain-client]
CipherString = DEFAULT
Ciphersuites = TLS_SM4_CCM_SM3
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/sm2-chain-ca.crt
VerifyMode = Peer

[test-15]
ExpectedCipher = TLS_SM4_CCM_SM3
ExpectedResult = Success


